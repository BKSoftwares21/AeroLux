// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  password    String
  fullName    String    @map("full_name")
  phone       String?
  role        Role      @default(USER)
  dateOfBirth DateTime? @map("date_of_birth")
  idOrPassport String?  @map("id_or_passport")
  lastLogin   DateTime? @map("last_login")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  bookings       Booking[]
  payments       Payment[]
  passwordResets PasswordReset[]

  @@map("users")
}

model Hotel {
  id          Int      @id @default(autoincrement())
  name        String
  city        String
  country     String
  description String?
  starRating  Int?     @map("star_rating")
  amenities   Json?
  imageUrl    String?  @map("image_url")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  bookings Booking[]

  @@map("hotels")
}

model Flight {
  id             Int      @id @default(autoincrement())
  flightNumber   String   @unique @map("flight_number")
  airline        String
  departure      String
  arrival        String
  date           DateTime
  time           String?
  price          Float
  imageUrl       String?  @map("image_url")
  isFirstClass   Boolean  @default(false) @map("is_first_class")
  capacity       Int      @default(0)
  seatsAvailable Int      @default(0) @map("seats_available")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  bookings Booking[]

  @@map("flights")
}

model Booking {
  id            String        @id @default(cuid())
  userId        Int           @map("user_id")
  type          BookingType
  reference     String        @unique
  date          DateTime
  amount        Float
  description   String
  status        BookingStatus @default(PENDING)
  paymentStatus PaymentStatus @default(UNPAID) @map("payment_status")
  metadata      Json?
  hotelId       Int?          @map("hotel_id")
  flightId      Int?          @map("flight_id")
  passengers    Int?          @map("passengers")
  cancelRequestedAt      DateTime? @map("cancel_requested_at")
  cancellationEffectiveAt DateTime? @map("cancellation_effective_at")
  refundStatus           String?   @map("refund_status")
  refundAmount           Float?    @map("refund_amount")
  refundedAt             DateTime? @map("refunded_at")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  user    User     @relation(fields: [userId], references: [id])
  hotel   Hotel?   @relation(fields: [hotelId], references: [id])
  flight  Flight?  @relation(fields: [flightId], references: [id])
  payment Payment?

  @@map("bookings")
}

model Payment {
  id        String    @id @default(cuid())
  bookingId String    @unique @map("booking_id")
  userId    Int       @map("user_id")
  amount    Float
  method    String?
  status    String    @default("pending")
  paidAt    DateTime? @map("paid_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  booking Booking @relation(fields: [bookingId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@map("payments")
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    Int      @map("user_id")
  codeHash  String   @map("code_hash")
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  usedAt    DateTime? @map("used_at")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])

  @@map("password_resets")
}

enum Role {
  USER  @map("user")
  ADMIN @map("admin")
}

enum BookingType {
  FLIGHT
  HOTEL
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  UNPAID
  PAID
}
